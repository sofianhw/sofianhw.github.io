<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sofian Hadiwijaya]]></title>
  <link href="http://blog.sofianhw.com/atom.xml" rel="self"/>
  <link href="http://blog.sofianhw.com/"/>
  <updated>2015-06-20T00:01:15+07:00</updated>
  <id>http://blog.sofianhw.com/</id>
  <author>
    <name><![CDATA[Sofian Hadiwijaya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Membuat Web Atau Blog Statis Gratis Pada Github Dengan Octopress]]></title>
    <link href="http://blog.sofianhw.com/blog/2015/06/19/membuat-web-atau-blog-statis-gratis-pada-github-dengan-octopress/"/>
    <updated>2015-06-19T21:59:34+07:00</updated>
    <id>http://blog.sofianhw.com/blog/2015/06/19/membuat-web-atau-blog-statis-gratis-pada-github-dengan-octopress</id>
    <content type="html"><![CDATA[<p>Hari ini kita bakal bahas bagaimana cara membuat blog ini. Blog ini merupakan blog statis, dimana tidak ada CMS (Content Management System) dan blog ini hanya terdiri dari HTML, CSS, JavaScript. Dan tentunya free, dengan manfaatkan <em>fitur</em> <a href="http://github.com">Github</a> pages dan <em>framework</em> blog statis seperti <a href="http://octopress.org">Octopress</a>.</p>

<!-- more -->


<p>Sebelum mulai pertama kita harus install <a href="http://octopress.org">Octopress</a> terlebih dahulu di-pc kita. untuk menginstall <a href="http://octopress.org">Octopress</a> kita membutuhkan beberapa tools berikut :</p>

<ul>
<li>Install Git.</li>
<li>Install Ruby >= 1.9.3 menggunakan rbenv atau RVM.</li>
<li>Install salah satu dari ExecJS yang <em>support</em> Javascript runtimes.</li>
</ul>


<h2>Setup Octopress</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>2. cd octopress
</span><span class='line'>3. gem install bundler
</span><span class='line'>4. rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>5. bundle install
</span><span class='line'>6. rake install    # install octopress
</span><span class='line'>7. rake preview    # generate preview </span></code></pre></td></tr></table></div></figure>


<p>Setelah itu Anda bisa menjalankan perintah &ldquo;rake preview&rdquo; untuk membuat blog jalan di localhost dengan default port 4000. Anda dapat mengakses blog anda secara offline dengan membuka <a href="http://localhost:4000.">http://localhost:4000.</a></p>

<h2>Deploy ke Github</h2>

<p>Pertama-tama buat <em>repository</em> baru pada <a href="http://github.com">Github</a> dengan format username.github.io ( ganti username dengan username kalian ). Berikut contohnya username saya ada <em>sofianhw</em>, maka _repository_nya adalah sofianhw.github.com.</p>

<p><img class="center" src="http://blog.sofianhw.com/images/buat-repository-github-page.jpg" title="'buat-repository-github-page'" ></p>

<p>Setelah Anda menekan tombol <em>Create Repository</em>, <em>Github Page</em> Anda dapat diakses melalui <a href="http://username.github.io">http://username.github.io</a> , sebagai contoh untuk mengakses <a href="http://github.com">Github</a> saya bisa melalui <a href="http://sofianhw.github.io.">http://sofianhw.github.io.</a></p>

<p>Untuk saat ini page Anda masih blank, karena belom ada file yang kita upload ke <a href="http://github.com">Github</a>. Mari kita pointing <a href="http://octopress.org">Octopress</a> kita ke <em>repository</em> yang baru saja kita buat. ketikan perintah berikut pada terminal Anda.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>Anda akan ditanya url dari <em>repository</em> <a href="http://github.com">Github</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter the read/write url for your repository
</span><span class='line'>(For example, 'git@github.com:your_username/your_username.github.io.git)
</span><span class='line'>           or 'https://github.com/your_username/your_username.github.io')
</span><span class='line'>Repository url: git@github.com:username/username.github.io.git</span></code></pre></td></tr></table></div></figure>


<p>Ganti username dengan username Anda. Setelah semuanya terkonfigurasi, Anda cukup mengetik perintah</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p><a href="http://octopress.org">Octopress</a> akan <em>mengenerate</em> blog statis Anda dan mengupload blog statis Anda ke repository <a href="http://github.com">Github</a>. Dan andapun dapat mengakses web / blog statis Anda melalui url <a href="http://username.github.io.">http://username.github.io.</a></p>

<h2>Reference</h2>

<ul>
<li><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></li>
<li><a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></li>
<li><a href="http://octopress.org/docs/configuring/">http://octopress.org/docs/configuring/</a></li>
<li><a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></li>
<li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IoT Pada Intel Galileo Menggunakan Platform Dari Geeknesia.com]]></title>
    <link href="http://blog.sofianhw.com/blog/2015/06/13/iot-pada-intel-galileo-menggunakan-platform-dari-geeknesia-dot-com/"/>
    <updated>2015-06-13T21:48:40+07:00</updated>
    <id>http://blog.sofianhw.com/blog/2015/06/13/iot-pada-intel-galileo-menggunakan-platform-dari-geeknesia-dot-com</id>
    <content type="html"><![CDATA[<p>Hari ini sangat luar biasa, karena saya dapat berbagi ilmu pengetahuan tentang &ldquo;Internet of Things&rdquo; dengan menggunakan <em>board</em> dari <a href="http://www.intel.com">intel</a> berupa <em>Intel Galileo</em> dan <em>Intel Edison</em> pada acara <a href="http://www.meetup.com/Bandung-Internet-of-Things-Meetup/events/223152407">Bandung Internet of Things Meetup yang ke 12</a>
Persentasi saya dimulai dari menceritakan apa itu <em>Intel Galileo</em> dan <em>Intel Edison</em>. Pada tulisan saat ini saya tidak akan banyak menulis tentang <em>board</em> tersebut, saya akan bercerita pengalaman sayang menggunakan <em>platform IoT</em> asli <em>made in</em> Bandung yaitu <a href="http://www.geeknesia.com">Geeknesia</a>.</p>

<!-- more -->


<h4>1. Registrasi</h4>

<p>Pertama kita harus registrasi dulu pada websitenya <a href="http://www.geeknesia.com">Geeknesia</a>, Tunggu beberapa saat nanti Anda akan mendapatkan email dari <a href="http://www.geeknesia.com">Geeknesia</a> berupa username dan password untuk masuk ke <em>platform IoT</em> tersebut.</p>

<h4>2. Add New Device</h4>

<p>Setelah mendapatkan akses, kita bisa menambahkan device yang kita punya dengan cara, mengklik button pada pojok kanan atas &ldquo;Add New Device&rdquo;, disini kita akan diminta untuk memberikan informasi <em>device</em> kita.</p>

<p><img class="center" src="http://blog.sofianhw.com/images/add-new-device.jpg" title="'add new device'" ></p>

<p>jika semua data sudah diisi dengan benar, kita tekan tombol <em>create</em>. Setelah itu kita akan dibawa ke halaman yang memberikan informasi detail tentang device kita dan beberapa contoh API dari <a href="http://www.geeknesia.com">Geeknesia</a> yang dapat kita gunakan nantinya.</p>

<p><img class="center" src="http://blog.sofianhw.com/images/detail-device.jpg" title="'detail device'" ></p>

<h4>3. Menghubungkan Intel Galileo ke Geeknesia</h4>

<p>Ada beberapa cara untuk menghubungkan Intel Galileo dan <a href="http://www.geeknesia.com">Geeknesia</a>. Namun pada artikel ini saya hanya akan membahas dengan menggunakan bahasa pemrogramman <em><a href="https://nodejs.org">nodejs</a></em> dan <em>protocol <a href="http://mqtt.org">mqtt</a></em>.
Saya menggunakan Grove Starter Kit, untuk memudahkan dalam menggunakan LED dan sensor LDR.</p>

<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-geeknesia.jpg" title="'intel galileo geeknesia'" ></p>

<p>Persiapkan Intel Galileo kalian, pertama-tama remote login Intel Galileo, bisa melalui ssh ataupun telnet ataupun screen. Untuk saat ini saya menggunakan ssh.
Kemudian tulis kode berikut dan simpan</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;galileo-geeknesia&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;menghubungkan galileo ke geeknesia&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;main&quot;</span><span class="o">:</span> <span class="s2">&quot;galileo-geeknesia.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;galileo-io&quot;</span><span class="o">:</span> <span class="s2">&quot;^0.8.14&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mqtt&quot;</span><span class="o">:</span> <span class="s2">&quot;^1.1.4&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;test&quot;</span><span class="o">:</span> <span class="s2">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;author&quot;</span><span class="o">:</span> <span class="s2">&quot;sofian hadiwijaya&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;license&quot;</span><span class="o">:</span> <span class="s2">&quot;ISC&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>galileo-geeknesia.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">mqtt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mqtt&#39;</span><span class="p">),</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">),</span> <span class="nx">Galileo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;galileo-io&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mqtt_url</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;mqtt://USERNAME:PASSWORD@geeknesia.com:1883&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">auth</span> <span class="o">=</span> <span class="p">(</span><span class="nx">mqtt_url</span><span class="p">.</span><span class="nx">auth</span> <span class="o">||</span> <span class="s1">&#39;:&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">board</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Galileo</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">LDR</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">mqtt</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="nx">mqtt_url</span><span class="p">.</span><span class="nx">port</span><span class="p">,</span> <span class="nx">mqtt_url</span><span class="p">.</span><span class="nx">hostname</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">username</span><span class="o">:</span> <span class="nx">auth</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">password</span><span class="o">:</span> <span class="nx">auth</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// When connected</span>
</span><span class='line'>  <span class="nx">client</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;iot/live&#39;</span><span class="p">,</span> <span class="s1">&#39;DEVICE_ID&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Menghubungkan ke Geeknesia&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">board</span><span class="p">.</span><span class="nx">pinMode</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="nx">board</span><span class="p">.</span><span class="nx">MODES</span><span class="p">.</span><span class="nx">OUTPUT</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">board</span><span class="p">.</span><span class="nx">analogRead</span><span class="p">(</span><span class="s2">&quot;A3&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">LDR</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">LDR</span> <span class="o">&gt;=</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">board</span><span class="p">.</span><span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nx">board</span><span class="p">.</span><span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;iot/data&#39;</span><span class="p">,</span> <span class="s1">&#39;{&quot;code&quot;:&quot;USERNAME:PASSWORD&quot;,&quot;attributes&quot;:{&quot;LDR&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">LDR</span><span class="o">+</span><span class="s1">&#39;&quot;}}&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Send data LDR = &quot;</span><span class="o">+</span><span class="nx">LDR</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ganti USERNAME, PASSWORD, dan DEVICE_ID sesuai dengan informasi detail dari device kalian. Source codenya saya upload ke <a href="http://www.github.com">github</a>, yang mau <em>clone</em> ataupun <em>fork</em> bisa ke link <a href="https://github.com/sofianhw/intel-galileo-geeknesia">intel-galileo-geeknesia</a>.
Untuk menjalan kode tersebut sebelumnya kita ketik perintah</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'><span class="nv">$ </span>npm install
</span></code></pre></td></tr></table></div></figure>


<p>perintah tersebut akan menginstal <em>dependencies</em> dari kode kita. Setelah itu untuk menjalankan <em>script</em> tersebut kita ketik perintah</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'><span class="nv">$ </span>node galileo-geeknesia.js
</span></code></pre></td></tr></table></div></figure>


<p>untuk melihat apakah kode tersebut berjalan dengan sempurna, kita kembali ke <em>dashboard</em> <a href="http://www.geeknesia.com">Geeknesia</a>. Kita pastikan device kita terhubung dan mengirimkan data, bisa dilihat pada gambar berikut</p>

<p><img class="center" src="http://blog.sofianhw.com/images/data-device.jpg" title="'data device'" ></p>

<p>Pengembangan selanjut, kita bisa bikin dashboard yang mendapatkan data dari API <a href="http://www.geeknesia.com">Geeknesia</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blinky LED Using Intel Galileo Board]]></title>
    <link href="http://blog.sofianhw.com/blog/2015/06/11/blinky-led-using-intel-galileo-board/"/>
    <updated>2015-06-11T23:55:39+07:00</updated>
    <id>http://blog.sofianhw.com/blog/2015/06/11/blinky-led-using-intel-galileo-board</id>
    <content type="html"><![CDATA[<p>After the <a href="http://www.bigdataindonesia.com/hackathon.php">IoT Hackathon</a> event held at <a href="www.crazyhackerz.com">Crazy Hackerz Makerspace</a> (7-8 March 2015), Intel decided to lend us the Intel Galileo for us to experiment and play around with it. In genereal Intel Galileo is embedded board which is a combination of the Arduino Uno with an Intel X1000 SoC Quark.  In short, Intel Galileo is a mini computer with the concept of DIY (Do it Yourself) which is similar to the Raspberry Pi.</p>

<!-- more -->


<p>Interestingly Intel Galileo is compatible with Arduino and Arduini, an electric kit or open source electronic circuit board which includes the main components of a chip microcontroller with the type of AVR. So through Intel Galileo we can control the Arduino directly from Linux.</p>

<p>I would like to take this opportunity to invite you to understand the theory of Internet Of Things (IOT) based on Intel’s simple Galileo (for you who want to study in more depth about the IOT, you can study for free in <a href="https://software.intel.com/en-us/courseware/IOT">intel iot course</a>.</p>

<p>Since I am a Web Developer, I like it when Intel discusses about <a href="http://nodejs.org">Nodejs</a> (section 7), especially on the way to control the input/output Arduino. The tools that we will be making this time is <em>Blinky Led</em> with the use of Nodejs program. But how do we do this? Come join me while I show you the process.</p>

<h2>Hardware Required</h2>

<p>First of all to start this project we will need:</p>

<ul>
<li>Intel Galileo</li>
<li>LED</li>
<li>Laptop/Computer (OS: Linux/Mac)</li>
</ul>


<h2>Connecting the Hardware</h2>

<p>Make sure the device is Intel Galileo and connected to a working laptop/computer and connected to a network. To know the IP address of the Intel Galileo, we can use the command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ arp-a</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-arp-a.png" title="'intel-galileo arp-a'" ></p>

<h2>Find the Intel Galileo IP address</h2>

<p>Since I use a LAN, I am able to see the mac address attached to the LAN port on the Intel Galileo. After retrieving the IP of the Intel Galileo, we remote login into Intel Galileo with the command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh root@[ip_intel_galileo]</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-ssh.png" title="'intel-galileo ssh'" ></p>

<h2>Create a Folder</h2>

<p>Upon entry into the Intel Galileo Linux, we will create a folder for our project. For example the folder name is First IOT then we make the command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir first-iot && cd first-iot</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-mkdir.png" title="'intel-galileo mkdir'" ></p>

<h2>Install the package</h2>

<p>Furthermore, we can use a package that has been provided for communicating with the Arduino contained in Intel Galileo. One package that is available is <a href="https://github.com/rwaldron/galileo-io">galileo-io</a> we can install the package with the command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install galileo-io</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-npm-install.png" title="'intel-galileo npm install'" ></p>

<h2>Enter the code</h2>

<p>We will create a <strong>hello world</strong> on the board, which is made of blinking LED, with the following code:</p>

<figure class='code'><figcaption><span>server.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">Galileo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;galileo-io&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">board</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Galileo</span><span class="p">();</span>
</span><span class='line'><span class="nx">board</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;ready&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="kr">byte</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">pinMode</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">MODES</span><span class="p">.</span><span class="nx">OUTPUT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">board</span><span class="p">.</span><span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,(</span><span class="kr">byte</span> <span class="o">^=</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write down the code in the file server.js example, to execute the code we use <strong>node server.js</strong> on the terminal. If you do not have the nodejs on the operating system, you can see the tutorial on the following <a href="https://nodejs.org/download">link</a></p>

<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-node-start.png" title="'intel-galileo node start'" ></p>

<p>Wooollllaaaaa!!! LED on pin 13 Arduino blinking</p>

<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-blinky.png" title="'intel-galileo blinky'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.sofianhw.com/blog/2015/06/11/hello-world/"/>
    <updated>2015-06-11T19:15:13+07:00</updated>
    <id>http://blog.sofianhw.com/blog/2015/06/11/hello-world</id>
    <content type="html"><![CDATA[<h2>You are reading my blog now!</h2>

<!-- more -->


<p><strong>My blog is all about :</strong></p>

<ul>
<li>Tech Updates</li>
<li>Tips &amp; Trick</li>
<li>My Lab</li>
</ul>


<p>Thanks for visiting my blog.</p>
]]></content>
  </entry>
  
</feed>
