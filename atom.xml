<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sofian Hadiwijaya]]></title>
  <link href="http://blog.sofianhw.com/atom.xml" rel="self"/>
  <link href="http://blog.sofianhw.com/"/>
  <updated>2015-07-05T02:12:41+07:00</updated>
  <id>http://blog.sofianhw.com/</id>
  <author>
    <name><![CDATA[Sofian Hadiwijaya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Interview Tentang Internet of Things via Email]]></title>
    <link href="http://blog.sofianhw.com/blog/2015/07/05/interview-tentang-internet-of-things-via-email/"/>
    <updated>2015-07-05T01:48:40+07:00</updated>
    <id>http://blog.sofianhw.com/blog/2015/07/05/interview-tentang-internet-of-things-via-email</id>
    <content type="html"><![CDATA[<h2>1. Apa sih yang dimaksud dengan Internet of Things?</h2>

<p>Sebuah konsep dimana benda/objek dengan bantuan perangkat elektronik, perngkat lunak, sensor, dan konektivitas/internet yang membuat benda tersebut dapat bertukaran data / informasi, yang menyebabkan benda tersebut bisa saling berinteraksi dan lebih pintar.</p>

<!--more-->


<h2>2. Apa saja yang termasuk dalam Internet of Things?</h2>

<p>Benda apa saja yang memiliki kemampuan berinteraksi via internet. Contoh yang sudah lama ada ditengah kita yaitu mesin ATM. Mesin ATM bisa berinteraksi dengan mesin server melalui internet, dan untuk menarik uang / menabung uang terdapat sensor yang bisa membedakan besaran uang tersebut.</p>

<h2>3. Apa saja manfaat yang bisa kita dapatkan dengan Internet of Things?</h2>

<p>Sisi baiknya adalah kita semakin dimanja dengan teknologi ini, dimana kita bisa berinteraksi dengan benda-benda milik kita dimanapun kita berada kita bisa mengkontrol benda tersebut. Contohnya sekarang banyak yang mengembangkan <em>smartcity</em>, kebayangkan ketika kota yang kita tinggali bisa berinteraksi dengan kita dimanapun kita berada. kita bisa tau jalan yang macet, efisiensi penggunakan energi lampu jalan. serta kita bisa mendapakan prediksi cuaca dan prediksi perjalan kita.
Salah satu teman saya mengembangkan teknologi <strong>IoT</strong> untuk membantu pembudidaya ikan. mereka membuat sebuah startup bernama <a href="http://www.efishery.com">efishery</a>. dimana mereka membuat sebuah tempat pakan ikan yang smart. dengan bantuan alat ini para petani budidaya ikan bisa menghemat pemberian pakan  kepada ikan. karena dengan sensor yang ada pada alat ini, memungkinkan untuk mengetahui apakah semua ikan sudah mendapatkan makanan. ketika semuanya efisien akan berakibat pada kondisi kolam yang lebih sehat, karena tidak ada pakan yang terbuang. Bahkan ketika pakan habis pun, alat tersebut bisa berinteraksi dengan mengirimkan notifikasi pada pemilik kolam.</p>

<h2>4. Di Indonesia sendiri, siapa yang mempopulerkan Internet of Things?</h2>

<p>Di Indonesia sendiri kita mempunya beberapa startup yang fokus dibidang <strong>IoT</strong>, kebetulan perusahaan saya <a href="http://crazyhackerz.com">Crazyhackerz</a> juga sedang mengembangkan beberapa perangkat berbasiskan <strong>IoT</strong>. Kita membidik sektor hiburan. Diantaranya kita mempunyai <a href="http://crazyhackerz.com/instaprint_by_crackerz">Instaprint</a> dan <a href="http://crazyhackerz.com/instabelly">Instabelly</a>, dimana kedua alat ini memanfaatkan API <a href="https://instagram.com">Instagram</a> untuk berinteraksi.
Startup lainnya seperti yang sudah saya sebutkan sebelumnya yaitu <a href="http://www.efishery.com">efishery</a>. Selain pada solusi ada juga startup yang menyediakan layanan <em>platform</em> <strong>IoT</strong> seperti <a href="http://www.geeknesia.com">Geeknesia</a>. Dengan adanya <em>platform</em> dari <a href="http://www.geeknesia.com">Geeknesia</a> ini akan mempermudah para pengembang <strong>IoT</strong> untuk fokus pada aplikasi/device mereka, tidak perlu pusing dengan complexnya membangun server sebagai tempat pertukaran data untuk para perangkat <strong>IoT</strong>.</p>

<h2>5. Anda  memanfaatkan Internet of Things untuk apa saja, menggunakan perangkat/ gadget apa, dan sudah berapa lama menggunakannya?</h2>

<p>Karena saya orangnya agak males, saya mencoba membuat kamar saya lebih <em>smart</em>. Dimana saya bisa mengkontrol lampu dan AC dari internet. jadi ketika saya pulang saya ingin kamar sudah nyala dan dalam keadaan dingin. dan ketika ingin tidur saya bisa mematikan lampu tanpa harus beranjak dari tempat tidur.</p>

<h2>6. Saat ini sudah beberapa kali acara meeting Komunitas <strong>IoT</strong> diadakan. Siapa yang mencetuskan acara ini, tujuannya untuk apa, dan siapa saja yang ikut serta?</h2>

<p>Komunitas <strong>IoT</strong> yang sangat konsisten berada di Bandung. kebetulan jum'at ini sudah memasuki pertemuan yang ke 13.
<a href="http://meetup.com/Bandung-Internet-of-Things-Meetup/">Bandung <strong>IoT</strong> Meetup</a>.
yang mengkoordinasi meetup ini Martin Kurniadi founder dari <a href="http://www.geeknesia.com">Geeknesia</a>. Meetup ini dia bentuk setelah mengikuti hackathon <strong>IoT</strong> yang kita adakan maret lalu, yang ikut acaranya ini <em>hobbyist</em>( komunitas arduino, raspberry pi) dan mahasiswa serta para pengembang bisnis yang terkait ( developer bangunan, telco, intel, ibm, dll ).</p>

<h2>7. Bisa dijelaskan sedikit mengenai Komunitas <strong>IoT</strong>? (Berdiri sejak kapan, kegiatan apa saja yang biasa diadakan, topik apa saja yang dibahas anggotanya sudah berapa banyak, dan berasal dari kalangan mana saja)</h2>

<p>Berdiri sejak Maret 2015, kegiatan kita biasa sharing teknologi baru, dan kita juga mengadakan workshop. jumlah peserta yang biasa hadir berkisar 50-60 orang.</p>

<h2>8. Kegiatan terakhir Komunitas <strong>IoT</strong> menyorot topik apa? Kapan kegiatan selanjutnya akan diadakan, dan topik apa yang akan dibahas?</h2>

<p>terakhir kita mengenalkan teknologi dari Intel, mereka punya beberapa board yang berhubungan dengan <strong>IoT</strong> ( intel galileo / intel edison ). dan juga kita mengundang beberapa startup <strong>IoT</strong> yang sudah me launching produk mereka ( efishery dan cubeacon ). next event tanggal 3 juli 2015. Akan membahas tentang <em>hype cycle</em> <strong>IoT</strong> dan raspberry pi.</p>

<h2>9. Bagaimana caranya jika ada yang ingin bergabung dengan Komunitas <strong>IoT</strong>. Apakah ada syarat tertentu? Seperti apa sistem keanggotaannya? Apakah ada kontak yang boleh dipublikasikan (misalnya email) bagi mereka yang ingin bergabung?</h2>

<p>Komunitasnya bersifat terbuka, siapa saja bisa bergabung kita, dapat mengunjungi sitenya <a href="http://meetup.com/Bandung-Internet-of-Things-Meetup/">Bandung <strong>IoT</strong> Meetup</a>.</p>

<h2>10. Terakhir, apa prediksi atau pandangan Anda terhadap <strong>IoT</strong> di Indonesia dalam beberapa tahun ke depan?</h2>

<p>Pangsa pasar untuk <strong>IoT</strong> masih sangat luas di indonesia. Dan atusias para pengembang juga sangat bagus. Kemungkinan demam startup di software / aplikasi juga akan terjadi di <strong>IoT</strong>. Seperti kita liat di crowdfunding <em>platform</em> banyak sekali benda-benda pintar yang sudah sukses disana. di indonesia pun kita punya beberapa crowdfunding yang akan mendukung para pengembang <strong>IoT</strong> ( <a href="https://kitabisa.com">Kitabisa</a>, <a href="http://wujudkan.com">wujudkan</a>, <a href="http://idesabi.com">idesabi</a>). Di dukung pula dengan maker movement di indonesia yang sangat bagus perkembangannya. Dan <a href="http://www.ge.com/id/">GE ( <em>General Electric</em> )</a> agustus nanti akan membuka GE Garage, dimana akan tersedia tools lengkap untuk para maker. Selain itu juga sudah banyak <strong>IoT</strong> hackathon yang mulai diadakan oleh beberapa organiasi di Indonesia, <a href="http://compfest.web.id/competition/internet-of-things-competition">Comfest UI</a> juga tahun ini memasukan <strong>IoT</strong> sebagai salah satu kompetisi mereka.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Menghubungkan Intel Edison Ke Geeknesia via MQTT Python-Paho]]></title>
    <link href="http://blog.sofianhw.com/blog/2015/07/03/menghubungkan-intel-edison-ke-geeknesia-via-mqtt-python-paho/"/>
    <updated>2015-07-03T16:58:55+07:00</updated>
    <id>http://blog.sofianhw.com/blog/2015/07/03/menghubungkan-intel-edison-ke-geeknesia-via-mqtt-python-paho</id>
    <content type="html"><![CDATA[<p>Hello Good People,</p>

<p>Pada postingan sebelumnya kita sudah membahas cara menghubungkan Intel Galileo ke <a href="http://geeknesia.com">Geeknesia</a> dengan menggunakan nodejs. Kemudian minggu lalu saya juga menulis tentang dasar-dasar python. Nah gimana menurut kalian bahasa python sendiri?.</p>

<!-- more -->


<p>Sekarang kita akan mempelajari bagaimana menghubungkan Intel Edison <em>board</em> penerus dari Intel Galileo, bentuknya lebih kecil dan sudah dilengkapi dengan wifi dan bluetooth.</p>

<p>Sebelum kita menghubungkan Intel Edison ke geeknesia, kita akan mempelajari terlebih dahulu bagaimana cara mengkontrol GPIO dari Arduino <em>breakout</em> yang dibuat khusus untuk Intel Edison. Untuk mengkontrol GPIO pada Intel <em>Board</em> telah tersedia <em>module opensource</em> yaitu <a href="https://pypi.python.org/pypi/Wiring-x86/1.0.0">Wiring-x86</a>.</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip install wiring-x86
</span></code></pre></td></tr></table></div></figure>


<p>Mari kita tes untuk membuat blinky LED.</p>

<figure class='code'><figcaption><span>blink.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="c"># Import the time module enable sleeps between turning the led on and off.</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Import the GPIOEdison class from the wiringx86 module.</span>
</span><span class='line'><span class="c"># In case you want to use a different board, simply the import right class</span>
</span><span class='line'><span class="c"># below. The API is unified for all supported boards.</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">wiringx86</span> <span class="kn">import</span> <span class="n">GPIOEdison</span> <span class="k">as</span> <span class="n">GPIO</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create a new instance of the GPIOEdison class.</span>
</span><span class='line'><span class="c"># Setting debug=True gives information about the interaction with sysfs.</span>
</span><span class='line'><span class="n">gpio</span> <span class="o">=</span> <span class="n">GPIO</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="n">pin</span> <span class="o">=</span> <span class="mi">7</span>
</span><span class='line'><span class="n">state</span> <span class="o">=</span> <span class="n">gpio</span><span class="o">.</span><span class="n">HIGH</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Set pin 7 to be used as an output GPIO pin.</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Setting up pin </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">pin</span>
</span><span class='line'><span class="n">gpio</span><span class="o">.</span><span class="n">pinMode</span><span class="p">(</span><span class="n">pin</span><span class="p">,</span> <span class="n">gpio</span><span class="o">.</span><span class="n">OUTPUT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Blinking pin </span><span class="si">%d</span><span class="s"> now...&#39;</span> <span class="o">%</span> <span class="n">pin</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># Write a state to the pin. ON or OFF.</span>
</span><span class='line'>        <span class="n">gpio</span><span class="o">.</span><span class="n">digitalWrite</span><span class="p">(</span><span class="n">pin</span><span class="p">,</span> <span class="n">state</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Toggle the state.</span>
</span><span class='line'>        <span class="n">state</span> <span class="o">=</span> <span class="n">gpio</span><span class="o">.</span><span class="n">LOW</span> <span class="k">if</span> <span class="n">state</span> <span class="o">==</span> <span class="n">gpio</span><span class="o">.</span><span class="n">HIGH</span> <span class="k">else</span> <span class="n">gpio</span><span class="o">.</span><span class="n">HIGH</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Sleep for a while.</span>
</span><span class='line'>        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># When you get tired of seeing the led blinking kill the loop with Ctrl-C.</span>
</span><span class='line'><span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># Leave the led turned off.</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">Cleaning up...&#39;</span>
</span><span class='line'>    <span class="n">gpio</span><span class="o">.</span><span class="n">digitalWrite</span><span class="p">(</span><span class="n">pin</span><span class="p">,</span> <span class="n">gpio</span><span class="o">.</span><span class="n">LOW</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Do a general cleanup. Calling this function is not mandatory.</span>
</span><span class='line'>    <span class="n">gpio</span><span class="o">.</span><span class="n">cleanup</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>simpan dengan nama file blink.py , mari kita execute filenya.</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python blink.py
</span></code></pre></td></tr></table></div></figure>


<p><video width='320' height='640' preload='metadata' controls poster='http://blog.sofianhw.com/images/blinking-led-edison.jpg'><source src='http://blog.sofianhw.com/images/blinking-led-edison.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p>Hore!!! LED-nya kedap-kedip.</p>

<p>Setelah kita bisa mengkontrol GPIO dari Intel Edison sekarang saatnya kita menginstall <em>package</em> untuk MQTT Client. Salah satu <em>module</em> yang hits sekarang yaitu <a href="https://pypi.python.org/pypi/paho-mqtt">Paho-MQTT</a>.</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>pip install paho-mqtt
</span></code></pre></td></tr></table></div></figure>


<p>Selanjutnya, berikut kode dasar menggunakan paho-mqtt untuk berkomunikasi dengan <a href="http://geeknesia.com">Geeknesia</a> :</p>

<figure class='code'><figcaption><span>mqttClient.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="kn">from</span> <span class="nn">wiringx86</span> <span class="kn">import</span> <span class="n">GPIOEdison</span> <span class="k">as</span> <span class="n">GPIO</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">paho.mqtt.client</span> <span class="kn">as</span> <span class="nn">paho</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">urlparse</span><span class="o">,</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="n">gpio</span> <span class="o">=</span> <span class="n">GPIO</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="n">analogpin</span> <span class="o">=</span> <span class="mi">17</span>
</span><span class='line'><span class="n">gpio</span><span class="o">.</span><span class="n">pinMode</span><span class="p">(</span><span class="n">analogpin</span><span class="p">,</span> <span class="n">gpio</span><span class="o">.</span><span class="n">ANALOG_INPUT</span><span class="p">)</span>
</span><span class='line'><span class="c"># Define event callbacks</span>
</span><span class='line'><span class="k">def</span> <span class="nf">on_connect</span><span class="p">(</span><span class="n">mosq</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">rc</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;rc: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">rc</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">mosq</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">topic</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">qos</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">payload</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">on_publish</span><span class="p">(</span><span class="n">mosq</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">mid</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;mid: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">mid</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">on_subscribe</span><span class="p">(</span><span class="n">mosq</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">granted_qos</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Subscribed: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">granted_qos</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">on_log</span><span class="p">(</span><span class="n">mosq</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">string</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">mqttc</span> <span class="o">=</span> <span class="n">paho</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span>
</span><span class='line'><span class="c"># Assign event callbacks</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">on_message</span> <span class="o">=</span> <span class="n">on_message</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">on_connect</span> <span class="o">=</span> <span class="n">on_connect</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">on_publish</span> <span class="o">=</span> <span class="n">on_publish</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">on_subscribe</span> <span class="o">=</span> <span class="n">on_subscribe</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Uncomment to enable debug messages</span>
</span><span class='line'><span class="c">#mqttc.on_log = on_log</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Parse CLOUDMQTT_URL (or fallback to localhost)</span>
</span><span class='line'><span class="n">url_str</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;CLOUDMQTT_URL&#39;</span><span class="p">,</span> <span class="s">&#39;mqtt://USERNAME:PASSWORD@geeknesia.com:1883&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="n">urlparse</span><span class="o">.</span><span class="n">urlparse</span><span class="p">(</span><span class="n">url_str</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Connect</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">username_pw_set</span><span class="p">(</span><span class="n">url</span><span class="o">.</span><span class="n">username</span><span class="p">,</span> <span class="n">url</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">url</span><span class="o">.</span><span class="n">hostname</span><span class="p">,</span> <span class="n">url</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Start subscribe, with QoS level 0</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="s">&quot;hello/world&quot;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Publish a message</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s">&quot;iot/live&quot;</span><span class="p">,</span> <span class="s">&quot;DEVICE_ID&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Continue the network loop, exit when an error occurs</span>
</span><span class='line'><span class="n">rc</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="n">rc</span> <span class="o">=</span> <span class="n">mqttc</span><span class="o">.</span><span class="n">loop</span><span class="p">()</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="n">gpio</span><span class="o">.</span><span class="n">analogRead</span><span class="p">(</span><span class="n">analogpin</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mqttc</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="s">&quot;iot/data&quot;</span><span class="p">,</span> <span class="s">&#39;{&quot;code&quot;:&quot;USERNAME:PASSWORD&quot;,&quot;attributes&quot;:{&quot;LDR&quot;:&quot;&#39;</span><span class="o">+</span> <span class="sb">`value`</span> <span class="o">+</span><span class="s">&#39;&quot;}}&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;rc: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">rc</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Analog Input pada <em>module</em> Wiring-x86 mulai dari pin 17-19. Jadi A0 = 17 , dan seterusnya. Untuk saat ini saya menggunakan A03 sebagai Analog Input. Dengan demikian saya menggunakan pin 17.</p>

<p>Jangan lupa ganti DEVICE_ID, USERNAME, dan PASSWORD , sesuai dengan informasi detail dari device yang Anda daftarkan pada <a href="http://geeknesia.com">Geeknesia</a>.
Mari kita execute script python kita</p>

<figure class='code'><figcaption><span>Terminal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>python mqttClient.py
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://blog.sofianhw.com/images/blinking-led-edison.jpg" width="320" height="320" title="'blinking led edison'" >
<img class="center" src="http://blog.sofianhw.com/images/data-device.jpg" title="'data-device'" ></p>

<p>Intel Edison akan selalu mengirimkan data dari sensor LDR ke <a href="http://geeknesia.com">Geeknesia</a> dengan interval 60 detik.
Semua source saya upload ke Github dengan nama repo <a href="">python-mqtt-geeknesia</a>.</p>

<p>Silakan berkreasi dengan dasar yang sudah ada.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pengenalan Bahasa Pemrogramman Python]]></title>
    <link href="http://blog.sofianhw.com/blog/2015/06/29/pengenalan-bahasa-pemrogramman-python/"/>
    <updated>2015-06-29T00:04:38+07:00</updated>
    <id>http://blog.sofianhw.com/blog/2015/06/29/pengenalan-bahasa-pemrogramman-python</id>
    <content type="html"><![CDATA[<p>Seiring dengan pesatnya perkembangan <em>mini computer</em> <em>raspberry pi</em>, makin banyak <em>programmer</em> yang kembali melirik bahasa pemrogramman yang sudah cukup tua, yaitu <em>python</em>. Python merupakan bahasa pemrogramman yang mengedepankan <em>readability</em> dan <em>productivity</em>. Mungkin hal tersebut yang membuat para pengembang <em>raspberry pi</em> memilih Python sebagai bahasa pemrogramman yang mereka gunakan dalam pembuatan perangkat lunak yang bisa mengontrol <em>board</em> mereka.</p>

<!-- more -->


<p>Python mulai diciptakan oleh <a href="https://en.wikipedia.org/wiki/Guido_van_Rossum">Guido van Rossum</a> pada tahun 80an. Sejarah lengkapnya dapat dibaca pada <a href="https://en.wikipedia.org/wiki/Python_(programming_language">wikipedia python</a>).</p>

<h2>Perusahaan Apa Saja yang Menggunakan Python</h2>

<ul>
<li><a href="https://google.co.id">Google</a></li>
<li><a href="http://www.nasa.gov">NASA</a></li>
<li><a href="https://www.youtube.com">Youtube</a></li>
<li><a href="https://www.instagram.com">Instagram</a></li>
<li><a href="https://www.spotify.com">Spotify</a></li>
<li><a href="https://wiki.python.org/moin/OrganizationsUsingPython">Etc.</a></li>
</ul>


<h2>Install Python</h2>

<p>Untuk menginstall python dapat mengikuti <a href="https://wiki.python.org/moin/BeginnersGuide/Download">link berikut</a>. Kebetulan OS yang saya pake adalah OSX maka python biasanya sudah termasuk dalam system unix dan linux. Jika sudah menginstall python, pada terminal/command prompt anda cukup mengetik &ldquo;python&rdquo; enter. Maka Anda akan dibawa ke python interpreter.</p>

<p><img class="center" src="http://blog.sofianhw.com/images/python-interpreter.jpg" title="'python interpreter'" ></p>

<h2>Pengenalan</h2>

<iframe src="http://www.slideshare.net/slideshow/embed_code/49933401 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>

<h2>Penggunaan</h2>

<p>Setelah mengerti dasar-dasar dari python untuk mengkontrol GPIO pada <em>board</em> Anda dapat menggunakan package berikut :</p>

<ul>
<li>Raspberry Pi <a href="https://pypi.python.org/pypi/RPi.GPIO">RPi.GPIO</a></li>
<li>Intel Galileo <a href="https://pypi.python.org/pypi/Wiring-x86/0.1">Wiring-x86</a></li>
</ul>


<p>Silakan mencoba pada board kesayangan Anda.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Membuat Web Atau Blog Statis Gratis Pada Github Dengan Octopress]]></title>
    <link href="http://blog.sofianhw.com/blog/2015/06/19/membuat-web-atau-blog-statis-gratis-pada-github-dengan-octopress/"/>
    <updated>2015-06-19T21:59:34+07:00</updated>
    <id>http://blog.sofianhw.com/blog/2015/06/19/membuat-web-atau-blog-statis-gratis-pada-github-dengan-octopress</id>
    <content type="html"><![CDATA[<p>Hari ini kita bakal bahas bagaimana cara membuat blog ini. Blog ini merupakan blog statis, dimana tidak ada CMS (Content Management System) dan blog ini hanya terdiri dari HTML, CSS, JavaScript. Dan tentunya free, dengan manfaatkan <em>fitur</em> <a href="http://github.com">Github</a> pages dan <em>framework</em> blog statis seperti <a href="http://octopress.org">Octopress</a>.</p>

<!-- more -->


<p>Sebelum mulai pertama kita harus install <a href="http://octopress.org">Octopress</a> terlebih dahulu di-pc kita. untuk menginstall <a href="http://octopress.org">Octopress</a> kita membutuhkan beberapa tools berikut :</p>

<ul>
<li>Install Git.</li>
<li>Install Ruby >= 1.9.3 menggunakan rbenv atau RVM.</li>
<li>Install salah satu dari ExecJS yang <em>support</em> Javascript runtimes.</li>
</ul>


<h2>Setup Octopress</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>2. cd octopress
</span><span class='line'>3. gem install bundler
</span><span class='line'>4. rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>5. bundle install
</span><span class='line'>6. rake install    # install octopress
</span><span class='line'>7. rake preview    # generate preview </span></code></pre></td></tr></table></div></figure>


<p>Setelah itu Anda bisa menjalankan perintah &ldquo;rake preview&rdquo; untuk membuat blog jalan di localhost dengan default port 4000. Anda dapat mengakses blog anda secara offline dengan membuka <a href="http://localhost:4000.">http://localhost:4000.</a></p>

<h2>Deploy ke Github</h2>

<p>Pertama-tama buat <em>repository</em> baru pada <a href="http://github.com">Github</a> dengan format username.github.io ( ganti username dengan username kalian ). Berikut contohnya username saya ada <em>sofianhw</em>, maka _repository_nya adalah sofianhw.github.com.</p>

<p><img class="center" src="http://blog.sofianhw.com/images/buat-repository-github-page.jpg" title="'buat-repository-github-page'" ></p>

<p>Setelah Anda menekan tombol <em>Create Repository</em>, <em>Github Page</em> Anda dapat diakses melalui <a href="http://username.github.io">http://username.github.io</a> , sebagai contoh untuk mengakses <a href="http://github.com">Github</a> saya bisa melalui <a href="http://sofianhw.github.io.">http://sofianhw.github.io.</a></p>

<p>Untuk saat ini page Anda masih blank, karena belom ada file yang kita upload ke <a href="http://github.com">Github</a>. Mari kita pointing <a href="http://octopress.org">Octopress</a> kita ke <em>repository</em> yang baru saja kita buat. ketikan perintah berikut pada terminal Anda.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>Anda akan ditanya url dari <em>repository</em> <a href="http://github.com">Github</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter the read/write url for your repository
</span><span class='line'>(For example, 'git@github.com:your_username/your_username.github.io.git)
</span><span class='line'>           or 'https://github.com/your_username/your_username.github.io')
</span><span class='line'>Repository url: git@github.com:username/username.github.io.git</span></code></pre></td></tr></table></div></figure>


<p>Ganti username dengan username Anda. Setelah semuanya terkonfigurasi, Anda cukup mengetik perintah</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<p><a href="http://octopress.org">Octopress</a> akan <em>mengenerate</em> blog statis Anda dan mengupload blog statis Anda ke repository <a href="http://github.com">Github</a>. Dan andapun dapat mengakses web / blog statis Anda melalui url <a href="http://username.github.io.">http://username.github.io.</a></p>

<h2>Reference</h2>

<ul>
<li><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></li>
<li><a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></li>
<li><a href="http://octopress.org/docs/configuring/">http://octopress.org/docs/configuring/</a></li>
<li><a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></li>
<li><a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IoT Pada Intel Galileo Menggunakan Platform Dari Geeknesia.com]]></title>
    <link href="http://blog.sofianhw.com/blog/2015/06/13/iot-pada-intel-galileo-menggunakan-platform-dari-geeknesia-dot-com/"/>
    <updated>2015-06-13T21:48:40+07:00</updated>
    <id>http://blog.sofianhw.com/blog/2015/06/13/iot-pada-intel-galileo-menggunakan-platform-dari-geeknesia-dot-com</id>
    <content type="html"><![CDATA[<p>Hari ini sangat luar biasa, karena saya dapat berbagi ilmu pengetahuan tentang &ldquo;Internet of Things&rdquo; dengan menggunakan <em>board</em> dari <a href="http://www.intel.com">intel</a> berupa <em>Intel Galileo</em> dan <em>Intel Edison</em> pada acara <a href="http://www.meetup.com/Bandung-Internet-of-Things-Meetup/events/223152407">Bandung Internet of Things Meetup yang ke 12</a>
Persentasi saya dimulai dari menceritakan apa itu <em>Intel Galileo</em> dan <em>Intel Edison</em>. Pada tulisan saat ini saya tidak akan banyak menulis tentang <em>board</em> tersebut, saya akan bercerita pengalaman sayang menggunakan <em>platform IoT</em> asli <em>made in</em> Bandung yaitu <a href="http://www.geeknesia.com">Geeknesia</a>.</p>

<!-- more -->


<h4>1. Registrasi</h4>

<p>Pertama kita harus registrasi dulu pada websitenya <a href="http://www.geeknesia.com">Geeknesia</a>, Tunggu beberapa saat nanti Anda akan mendapatkan email dari <a href="http://www.geeknesia.com">Geeknesia</a> berupa username dan password untuk masuk ke <em>platform IoT</em> tersebut.</p>

<h4>2. Add New Device</h4>

<p>Setelah mendapatkan akses, kita bisa menambahkan device yang kita punya dengan cara, mengklik button pada pojok kanan atas &ldquo;Add New Device&rdquo;, disini kita akan diminta untuk memberikan informasi <em>device</em> kita.</p>

<p><img class="center" src="http://blog.sofianhw.com/images/add-new-device.jpg" title="'add new device'" ></p>

<p>jika semua data sudah diisi dengan benar, kita tekan tombol <em>create</em>. Setelah itu kita akan dibawa ke halaman yang memberikan informasi detail tentang device kita dan beberapa contoh API dari <a href="http://www.geeknesia.com">Geeknesia</a> yang dapat kita gunakan nantinya.</p>

<p><img class="center" src="http://blog.sofianhw.com/images/detail-device.jpg" title="'detail device'" ></p>

<h4>3. Menghubungkan Intel Galileo ke Geeknesia</h4>

<p>Ada beberapa cara untuk menghubungkan Intel Galileo dan <a href="http://www.geeknesia.com">Geeknesia</a>. Namun pada artikel ini saya hanya akan membahas dengan menggunakan bahasa pemrogramman <em><a href="https://nodejs.org">nodejs</a></em> dan <em>protocol <a href="http://mqtt.org">mqtt</a></em>.
Saya menggunakan Grove Starter Kit, untuk memudahkan dalam menggunakan LED dan sensor LDR.</p>

<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-geeknesia.jpg" title="'intel galileo geeknesia'" ></p>

<p>Persiapkan Intel Galileo kalian, pertama-tama remote login Intel Galileo, bisa melalui ssh ataupun telnet ataupun screen. Untuk saat ini saya menggunakan ssh.
Kemudian tulis kode berikut dan simpan</p>

<figure class='code'><figcaption><span>package.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;galileo-geeknesia&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;version&quot;</span><span class="o">:</span> <span class="s2">&quot;1.0.0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;menghubungkan galileo ke geeknesia&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;main&quot;</span><span class="o">:</span> <span class="s2">&quot;galileo-geeknesia.js&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;dependencies&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;galileo-io&quot;</span><span class="o">:</span> <span class="s2">&quot;^0.8.14&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;mqtt&quot;</span><span class="o">:</span> <span class="s2">&quot;^1.1.4&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;devDependencies&quot;</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;test&quot;</span><span class="o">:</span> <span class="s2">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;author&quot;</span><span class="o">:</span> <span class="s2">&quot;sofian hadiwijaya&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;license&quot;</span><span class="o">:</span> <span class="s2">&quot;ISC&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>galileo-geeknesia.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">mqtt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mqtt&#39;</span><span class="p">),</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">),</span> <span class="nx">Galileo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;galileo-io&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mqtt_url</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;mqtt://USERNAME:PASSWORD@geeknesia.com:1883&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">auth</span> <span class="o">=</span> <span class="p">(</span><span class="nx">mqtt_url</span><span class="p">.</span><span class="nx">auth</span> <span class="o">||</span> <span class="s1">&#39;:&#39;</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">board</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Galileo</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">LDR</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">client</span> <span class="o">=</span> <span class="nx">mqtt</span><span class="p">.</span><span class="nx">createClient</span><span class="p">(</span><span class="nx">mqtt_url</span><span class="p">.</span><span class="nx">port</span><span class="p">,</span> <span class="nx">mqtt_url</span><span class="p">.</span><span class="nx">hostname</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">username</span><span class="o">:</span> <span class="nx">auth</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">password</span><span class="o">:</span> <span class="nx">auth</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// When connected</span>
</span><span class='line'>  <span class="nx">client</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;iot/live&#39;</span><span class="p">,</span> <span class="s1">&#39;DEVICE_ID&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Menghubungkan ke Geeknesia&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">board</span><span class="p">.</span><span class="nx">pinMode</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="nx">board</span><span class="p">.</span><span class="nx">MODES</span><span class="p">.</span><span class="nx">OUTPUT</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">board</span><span class="p">.</span><span class="nx">analogRead</span><span class="p">(</span><span class="s2">&quot;A3&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">LDR</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="nx">LDR</span> <span class="o">&gt;=</span><span class="mi">300</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">board</span><span class="p">.</span><span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nx">board</span><span class="p">.</span><span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">client</span><span class="p">.</span><span class="nx">publish</span><span class="p">(</span><span class="s1">&#39;iot/data&#39;</span><span class="p">,</span> <span class="s1">&#39;{&quot;code&quot;:&quot;USERNAME:PASSWORD&quot;,&quot;attributes&quot;:{&quot;LDR&quot;:&quot;&#39;</span><span class="o">+</span><span class="nx">LDR</span><span class="o">+</span><span class="s1">&#39;&quot;}}&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Send data LDR = &quot;</span><span class="o">+</span><span class="nx">LDR</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ganti USERNAME, PASSWORD, dan DEVICE_ID sesuai dengan informasi detail dari device kalian. Source codenya saya upload ke <a href="http://www.github.com">github</a>, yang mau <em>clone</em> ataupun <em>fork</em> bisa ke link <a href="https://github.com/sofianhw/intel-galileo-geeknesia">intel-galileo-geeknesia</a>.
Untuk menjalan kode tersebut sebelumnya kita ketik perintah</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'><span class="nv">$ </span>npm install
</span></code></pre></td></tr></table></div></figure>


<p>perintah tersebut akan menginstal <em>dependencies</em> dari kode kita. Setelah itu untuk menjalankan <em>script</em> tersebut kita ketik perintah</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'><span class="nv">$ </span>node galileo-geeknesia.js
</span></code></pre></td></tr></table></div></figure>


<p>untuk melihat apakah kode tersebut berjalan dengan sempurna, kita kembali ke <em>dashboard</em> <a href="http://www.geeknesia.com">Geeknesia</a>. Kita pastikan device kita terhubung dan mengirimkan data, bisa dilihat pada gambar berikut</p>

<p><img class="center" src="http://blog.sofianhw.com/images/data-device.jpg" title="'data device'" ></p>

<p>Pengembangan selanjut, kita bisa bikin dashboard yang mendapatkan data dari API <a href="http://www.geeknesia.com">Geeknesia</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blinky LED Using Intel Galileo Board]]></title>
    <link href="http://blog.sofianhw.com/blog/2015/06/11/blinky-led-using-intel-galileo-board/"/>
    <updated>2015-06-11T23:55:39+07:00</updated>
    <id>http://blog.sofianhw.com/blog/2015/06/11/blinky-led-using-intel-galileo-board</id>
    <content type="html"><![CDATA[<p>After the <a href="http://www.bigdataindonesia.com/hackathon.php">IoT Hackathon</a> event held at <a href="www.crazyhackerz.com">Crazy Hackerz Makerspace</a> (7-8 March 2015), Intel decided to lend us the Intel Galileo for us to experiment and play around with it. In genereal Intel Galileo is embedded board which is a combination of the Arduino Uno with an Intel X1000 SoC Quark.  In short, Intel Galileo is a mini computer with the concept of DIY (Do it Yourself) which is similar to the Raspberry Pi.</p>

<!-- more -->


<p>Interestingly Intel Galileo is compatible with Arduino and Arduini, an electric kit or open source electronic circuit board which includes the main components of a chip microcontroller with the type of AVR. So through Intel Galileo we can control the Arduino directly from Linux.</p>

<p>I would like to take this opportunity to invite you to understand the theory of Internet Of Things (IOT) based on Intel’s simple Galileo (for you who want to study in more depth about the IOT, you can study for free in <a href="https://software.intel.com/en-us/courseware/IOT">intel iot course</a>.</p>

<p>Since I am a Web Developer, I like it when Intel discusses about <a href="http://nodejs.org">Nodejs</a> (section 7), especially on the way to control the input/output Arduino. The tools that we will be making this time is <em>Blinky Led</em> with the use of Nodejs program. But how do we do this? Come join me while I show you the process.</p>

<h2>Hardware Required</h2>

<p>First of all to start this project we will need:</p>

<ul>
<li>Intel Galileo</li>
<li>LED</li>
<li>Laptop/Computer (OS: Linux/Mac)</li>
</ul>


<h2>Connecting the Hardware</h2>

<p>Make sure the device is Intel Galileo and connected to a working laptop/computer and connected to a network. To know the IP address of the Intel Galileo, we can use the command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ arp-a</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-arp-a.png" title="'intel-galileo arp-a'" ></p>

<h2>Find the Intel Galileo IP address</h2>

<p>Since I use a LAN, I am able to see the mac address attached to the LAN port on the Intel Galileo. After retrieving the IP of the Intel Galileo, we remote login into Intel Galileo with the command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ssh root@[ip_intel_galileo]</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-ssh.png" title="'intel-galileo ssh'" ></p>

<h2>Create a Folder</h2>

<p>Upon entry into the Intel Galileo Linux, we will create a folder for our project. For example the folder name is First IOT then we make the command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir first-iot && cd first-iot</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-mkdir.png" title="'intel-galileo mkdir'" ></p>

<h2>Install the package</h2>

<p>Furthermore, we can use a package that has been provided for communicating with the Arduino contained in Intel Galileo. One package that is available is <a href="https://github.com/rwaldron/galileo-io">galileo-io</a> we can install the package with the command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install galileo-io</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-npm-install.png" title="'intel-galileo npm install'" ></p>

<h2>Enter the code</h2>

<p>We will create a <strong>hello world</strong> on the board, which is made of blinking LED, with the following code:</p>

<figure class='code'><figcaption><span>server.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='JavaScript'><span class='line'><span class="kd">var</span> <span class="nx">Galileo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;galileo-io&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">board</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Galileo</span><span class="p">();</span>
</span><span class='line'><span class="nx">board</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;ready&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="kr">byte</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">pinMode</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">MODES</span><span class="p">.</span><span class="nx">OUTPUT</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">board</span><span class="p">.</span><span class="nx">digitalWrite</span><span class="p">(</span><span class="mi">13</span><span class="p">,(</span><span class="kr">byte</span> <span class="o">^=</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="p">},</span> <span class="mi">500</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Write down the code in the file server.js example, to execute the code we use <strong>node server.js</strong> on the terminal. If you do not have the nodejs on the operating system, you can see the tutorial on the following <a href="https://nodejs.org/download">link</a></p>

<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-node-start.png" title="'intel-galileo node start'" ></p>

<p>Wooollllaaaaa!!! LED on pin 13 Arduino blinking</p>

<p><img class="center" src="http://blog.sofianhw.com/images/intel-galileo-blinky.png" title="'intel-galileo blinky'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.sofianhw.com/blog/2015/06/11/hello-world/"/>
    <updated>2015-06-11T19:15:13+07:00</updated>
    <id>http://blog.sofianhw.com/blog/2015/06/11/hello-world</id>
    <content type="html"><![CDATA[<h2>You are reading my blog now!</h2>

<!-- more -->


<p><strong>My blog is all about :</strong></p>

<ul>
<li>Tech Updates</li>
<li>Tips &amp; Trick</li>
<li>My Lab</li>
</ul>


<p>Thanks for visiting my blog.</p>
]]></content>
  </entry>
  
</feed>
