<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Iot | Sofian Hadiwijaya]]></title>
  <link href="http://www.sofianhw.com/blog/categories/iot/atom.xml" rel="self"/>
  <link href="http://www.sofianhw.com/"/>
  <updated>2015-10-21T01:00:04+07:00</updated>
  <id>http://www.sofianhw.com/</id>
  <author>
    <name><![CDATA[Sofian Hadiwijaya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Amazon Meluncurkan AWS IoT (Internet of Things)]]></title>
    <link href="http://www.sofianhw.com/blog/2015/10/09/amazon-meluncurkan-aws-iot-internet-of-things/"/>
    <updated>2015-10-09T01:25:51+07:00</updated>
    <id>http://www.sofianhw.com/blog/2015/10/09/amazon-meluncurkan-aws-iot-internet-of-things</id>
    <content type="html"><![CDATA[<p>Akhirnya Amazon meluncurkan <a href="https://aws.amazon.com/iot/">IoT Platform</a> pada acara re:Invent developer conference di Las Vegas.</p>

<p><img class="center <a" src="href="https://tctechcrunch2011.files.wordpress.com/2015/10/dsc01840.jpg?w=738">https://tctechcrunch2011.files.wordpress.com/2015/10/dsc01840.jpg?w=738</a>"></p>

<!-- more -->


<p>Amazon menjelaskan, &ldquo;AWS IoT memungkinkan perangkat yang terhubung dengan mudah dan aman berinteraksi dengan aplikasi cloud dan perangkat lainnya.&rdquo;. Platform yang masih versi beta tersebut, dapat mengelola miliaran perangkat dan triliunan pesan, &ldquo;Dan dapat memproses dan mengatur rute pesan-pesan ke AWS endpoint dan perangkat lain andal dan aman.&rdquo;</p>

<p>AWS IoT akan mengintegrasikan Lambda, Amazon Kinesis, Amazon S3, Amazon Machine Learning, dan Amazon DynamoDB untuk membangun aplikasi IOT, mengelola infrastruktur dan menganalisis data.</p>

<p>&ldquo;Connected does not necessarily mean useful,&rdquo; kata Werner Vogels - CTO Amazon.</p>

<p><img class="center <a" src="href="https://tctechcrunch2011.files.wordpress.com/2015/10/dsc01848.jpg?w=1024&amp;h=680">https://tctechcrunch2011.files.wordpress.com/2015/10/dsc01848.jpg?w=1024&amp;h=680</a>"></p>

<p>Fitur yang akan disediakan AWS IoT antara lain Device Gateway, Rules-based engine, dan Registry. Selain itu ada juga Device Shadows, yang mana fitur tersebut memungkinkan Anda melacak data tentang perangkat ketika mereka offline dan mengirimkannya kembali ke dalam sistem setelah mereka kembali online.</p>

<p>Platform ini akan memudahkan pengembang untuk memproses data yang masuk dari perangkat yang menggunakan gateway standar dan protokol seperti MQTT dan HTTPS.</p>

<p>Seperti dengan layanan AWS lainnya, harga untuk platform IOT berdasarkan atas apa yang Anda gunakan tanpa biaya minimum. Harga dihitung berdasarkan jumlah pesan yang kirim ke AWS IoT (Publishing Cost), dan jumlah pesan yang disampaikan oleh AWS IoT ke perangkat atau aplikasi (Delivery Cost). Sebagai pemanis untuk membuat Anda tetap berada dalam ekosistem AWS, harga tidak termasuk konektivitas ke beberapa layanan AWS lainnya, khususnya Amazon S3, Amazon DynamoDB, AWS Lambda, Amazon Kinesis, Amazon SNS, dan Amazon SQS.</p>

<p>AWS IoT menawarkan free tier dari 250.000 pesan gratis (published or delivered) per bulan, selama 12 bulan. Setelah itu, berikut tabel harganya:</p>

<table>
<thead>
<tr>
<th> Region                 </th>
<th> Harga                   </th>
</tr>
</thead>
<tbody>
<tr>
<td> US East (N. Virginia)  </td>
<td> $5 per million messages </td>
</tr>
<tr>
<td> US West (Oregon)       </td>
<td> $5 per million messages </td>
</tr>
<tr>
<td> EU (Ireland)           </td>
<td> $5 per million messages </td>
</tr>
<tr>
<td> Asia Pacific (Tokyo)   </td>
<td> $5 per million messages </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DIY - Kerekan Bendera Dikontrol via Twitter]]></title>
    <link href="http://www.sofianhw.com/blog/2015/08/20/diy-kerekan-bendera-dikontrol-via-twitter/"/>
    <updated>2015-08-20T09:47:39+07:00</updated>
    <id>http://www.sofianhw.com/blog/2015/08/20/diy-kerekan-bendera-dikontrol-via-twitter</id>
    <content type="html"><![CDATA[<p>4 Agustus 2015, melalui pembicaraan singkat team <a href="http://code4nation.org">Code4nation</a> pada platform <em>slack</em>, salah satu <em>member</em> dari <a href="http://techinasia.com">Techinasia</a> mengemukakan ide dari CTO mereka tentang <em>campaign</em> acara <a href="http://hackathonmerdeka.id">Hackathon Merdeka</a> yaitu membuat kerekan bendera yang dikontrol via <a href="https://twitter.com">twitter</a>, jadi ketika ada <em>tweet</em> dengan hashtag tertentu maka si bendera akan dengan sendirinya naik perlahan. Hal ini disambut positif oleh mas <a href="https://www.facebook.com/ainunnajib">Ainun Najib</a> (penggagas <a href="http://kawalpemilu.org">kawalpemilu</a> dan <a href="http://laporpresiden.id">laporpresiden</a>). &ldquo;@sofianhw bisa upayakan IoT (<em>Internet of Things</em>) -nya?&rdquo; ucap mas <a href="https://www.facebook.com/ainunnajib">Ainun Najib</a>. Seketika itu juga saya jawab &ldquo;Bisa!!&rdquo;.</p>

<p><img class="center" src="/images/sofian-hadiwijaya-bendera.JPG" width="640" height="640" title="&lsquo;sofian hadiwijaya bendera&rsquo;" ></p>

<!-- more -->


<p>Diselah-selah kesibukan mempersiapkan <em>event</em> <a href="http://therunway.tresemme.co.id/experience">Tresemme</a> pada acara Market Museum. Saya mencoba menyiapkan bahan, pertama yang terngiang dipikiran saya yaitu <em>stepper motor</em> agar pegerakannya lebih persisi. Dan untuk katrolnya sendiri saya akan menggunakan <em>timing belt printer</em>.</p>

<p>Pencarianpun dimulai, dari <em>online</em> maupun <em>offline</em>. <em>Timing belt printer</em> mayoritas pendek, saya membutuhkan minimal satu meter. Akhirnya nemu <em>timing belt 3d printer</em> di <a href="https://www.tokopedia.com">tokopedia</a> panjangnya pas banget satu meter.</p>

<p>Pada tanggal 13 Agustus 2015, <em>timing belt 3d printer</em> yang saya pesan tiba di tempat tinggal saya. Tapi saat itu saya lagi sibuk-sibuknya <em>loading</em> barang untuk event. Akhirnya tanggal 16 Agustus 2015, barulah saya punya kesempatan untuk menyelesaikan projek ini. Berikut barang-barang yang saya gunakan :</p>

<ul>
<li>Intel Edison</li>
<li>ULN2803a</li>
<li>Stepper Motor</li>
<li>Timing belt 3d printer</li>
<li>Dudukan untuk kamera</li>
<li>Gagang Sapu</li>
<li>Kabel Tie</li>
</ul>


<p><img class="center" src="/images/intel-edison.JPG" width="480" height="480" title="&lsquo;intel edison&rsquo;" >
<img class="center" src="/images/uln2803a-depan.JPG" width="480" height="480" title="&lsquo;uln2803a depan&rsquo;" >
<img class="center" src="/images/stepper-motor.JPG" width="480" height="480" title="&lsquo;stepper motor&rsquo;" >
<img class="center" src="/images/timing-belt.JPG" width="480" height="480" title="&lsquo;timing belt 3d printer&rsquo;" ></p>

<p>Pertama-tama saya akan rakit tiang benderanya dulu. Ikatkan dudukan kamera dan stepper motor pada gagang sapu menggunakan kabel tie.</p>

<p><img class="center" src="/images/terikat-atas.JPG" width="480" height="480" title="&lsquo;terikat atas&rsquo;" >
<img class="center" src="/images/terikat-bawah.JPG" width="480" height="480" title="&lsquo;terikat bawah&rsquo;" ></p>

<p>pastikan <em>timing belt</em> tidak terlalu kencang maupun kendor.</p>

<p>Setelah itu marilah kita rakit rangkaian ULN dan intel edison sebagai berikut :</p>

<p><img class="center" src="/images/scheme-uln-arduino-stepper.jpg" width="480" height="480" title="&lsquo;scheme uln arduino stepper&rsquo;" >
<img class="center" src="/images/uln-depan.JPG" width="480" height="480" title="&lsquo;uln2803a depan&rsquo;" >
<img class="center" src="/images/uln-samping.JPG" width="480" height="480" title="&lsquo;uln2803a samping&rsquo;" ></p>

<p>Mari kita sambungkan keseluruhan <em>system</em></p>

<p><img class="center" src="/images/kerekan-bendera-diy.JPG" width="480" height="480" title="&lsquo;kerekan bendera diy&rsquo;" ></p>

<p>Selanjutnya mari kita putar-putar kerekannya. Berikut kode yang saya tulis menggunakan bahasa <a href="http://blog.sofianhw.com/blog/2015/06/29/pengenalan-bahasa-pemrogramman-python/">python</a>.</p>

<pre><code class="Python countFlagSteps.py https://github.com/sofianhw/flagpole/blob/master/countFlagSteps.py">import time
from wiringx86 import GPIOEdison as GPIO
gpio = GPIO(debug=False)
pin1 = 3
pin2 = 4
pin3 = 5
pin4 = 6
index = 0

print 'Setting up pin %d' % pin1
gpio.pinMode(pin1, gpio.OUTPUT)
print 'Setting up pin %d' % pin2
gpio.pinMode(pin2, gpio.OUTPUT)
print 'Setting up pin %d' % pin3
gpio.pinMode(pin3, gpio.OUTPUT)
print 'Setting up pin %d' % pin4
gpio.pinMode(pin4, gpio.OUTPUT)

print 'Go up now...'
try:
  while(True):
    gpio.digitalWrite(pin4, gpio.LOW)     
    gpio.digitalWrite(pin2, gpio.HIGH)    
    time.sleep(0.01)                      

    gpio.digitalWrite(pin1, gpio.LOW)     
    gpio.digitalWrite(pin3, gpio.HIGH)    
    time.sleep(0.01)                      

    gpio.digitalWrite(pin2, gpio.LOW)     
    gpio.digitalWrite(pin4, gpio.HIGH)    
    time.sleep(0.01)                      

    gpio.digitalWrite(pin3, gpio.LOW)     
    gpio.digitalWrite(pin1, gpio.HIGH)    
    time.sleep(0.01)                      

    index=index+1

# When you get tired of seeing the led blinking kill the loop with Ctrl-C.
except KeyboardInterrupt:                                                 
  print '\nCleaning up...'                                              
  print 'total step %d' % index                                           
  gpio.digitalWrite(pin1, gpio.LOW)                                     
  gpio.digitalWrite(pin2, gpio.LOW)                                     
  gpio.digitalWrite(pin3, gpio.LOW)                                     
  gpio.digitalWrite(pin4, gpio.LOW)                                     

  # Do a general cleanup. Calling this function is not mandatory.       
  gpio.cleanup()     
</code></pre>

<p>eksekusi kode tersebut, ketika bendera sudah mencapai puncaknya tekan &ldquo;Ctrl + C&rdquo; untuk <em>interrupt</em> program, lalu program akan memberikan output berapa putaran yang diperlukan untuk mencapai puncak.</p>

<pre><code class="sh Terminal">$ python countFlagSteps.py
</code></pre>

<p>Ketika semua step dianggap sukses sekarang marilah kita hubungkan ke twitter.
sebelum memulai ada baiknya kita membuat <a href="https://apps.twitter.com">aplikasi pada twitter</a> kita.</p>

<p><img class="center" src="/images/twitter-hackathon-merdeka.png" width="480" height="480" title="&lsquo;twitter hackathon merdeka&rsquo;" ></p>

<p>Kita akan memanfaatkan <a href="https://dev.twitter.com/streaming/overview">API Streaming</a> untuk mendapatkan jumlah tweet secara <em>real-time</em>.</p>

<pre><code class="Python countTweets.py https://github.com/sofianhw/flagpole/blob/master/countTweets.py">import argparse
import time
from wiringx86 import GPIOEdison as GPIO
from TwitterAPI import TwitterAPI, TwitterOAuth, TwitterRestPager
gpio = GPIO(debug=False)
pin1 = 3
pin2 = 4
pin3 = 5
pin4 = 6
COUNT = 100 # search download batch size

def setup():
        print 'Setting up pin %d' % pin1
        gpio.pinMode(pin1, gpio.OUTPUT)
        print 'Setting up pin %d' % pin2
        gpio.pinMode(pin2, gpio.OUTPUT)
        print 'Setting up pin %d' % pin3
        gpio.pinMode(pin3, gpio.OUTPUT)
        print 'Setting up pin %d' % pin4
        gpio.pinMode(pin4, gpio.OUTPUT)                          

def puter():                                                     
        print "muter"                                            
        for i in range(100):                                     
                print i                                          
                gpio.digitalWrite(pin4, gpio.LOW)                
                gpio.digitalWrite(pin2, gpio.HIGH)               
                time.sleep(0.01)                  

                gpio.digitalWrite(pin1, gpio.LOW) 
                gpio.digitalWrite(pin3, gpio.HIGH)
                time.sleep(0.01)                  

                gpio.digitalWrite(pin2, gpio.LOW) 
                gpio.digitalWrite(pin4, gpio.HIGH)
                time.sleep(0.01)                  

                gpio.digitalWrite(pin3, gpio.LOW) 
                gpio.digitalWrite(pin1, gpio.HIGH)
                time.sleep(0.01)                  

def count_old_tweets(api, word_list): 
        words = ' OR '.join(word_list)                           
        count = 0                                                
        while True:                                              
                pager = TwitterRestPager(api, 'search/tweets', {'q':words, 'coun
                for item in pager.get_iterator():                               
                        if 'text' in item:                                      
                                count += 1                                      
                                print(count)                                    
                        elif 'message' in item:                                 
                                if item['code'] == 131:                         
                                        continue # ignore internal server error 
                                elif item['code'] == 88:                        
                                        print('Suspend search until %s' % search
                                raise Exception('Message from twitter: %s' % ite


def count_new_tweets(api, word_list):                                           
        words = ','.join(word_list)                                             
        count = 0                                                               
        total_skip = 0                                                          
        while True:                                                             
                skip = 0                                                        
                try:          
                        r = api.request('statuses/filter', {'track':words})     
                        while True:                                             
                                for item in r.get_iterator():                   
                                        if 'text' in item:                      
                                                count += 1                      
                                                puter()                         
                                                print(count + skip + total_skip)
                                        elif 'limit' in item:                   
                                                skip = item['limit'].get('track'
                                                #print('\n\n\n*** Skipping %d tw
                                        elif 'disconnect' in item:              
                                                raise Exception('Disconnect: %s'
                except Exception as e:                                          
                        print('*** MUST RECONNECT %s' % e)                      
                total_skip += skip                                              


if __name__ == '__main__':                                                      
        parser = argparse.ArgumentParser(description='Count occurance of word(s)
        parser.add_argument('-past', action='store_true', help='search historic 
        parser.add_argument('-oauth', metavar='FILENAME', type=str, help='read O
        parser.add_argument('words', metavar='W', type=str, nargs='+', help='wor
        args = parser.parse_args() 

        oauth = TwitterOAuth.read_file(args.oauth)                              
        api = TwitterAPI(oauth.consumer_key, oauth.consumer_secret, oauth.access

        try:                                                                    
                setup()                                                         
                if args.past:                                                   
                        count_old_tweets(api, args.words)                       
                else:                                                           
                        count_new_tweets(api, args.words)                       
        except KeyboardInterrupt:                                               
                print('\nTerminated by user\n')                                 
                gpio.digitalWrite(pin1, gpio.LOW)                               
                gpio.digitalWrite(pin2, gpio.LOW)                               
                gpio.digitalWrite(pin3, gpio.LOW)                               
                gpio.digitalWrite(pin4, gpio.LOW)                               

                # Do a general cleanup. Calling this function is not mandatory. 
                gpio.cleanup()                                                  
        except Exception as e:                                                  
                print('*** STOPPED %s\n' % e)  
</code></pre>

<pre><code class="sh token_key.txt https://github.com/sofianhw/flagpole/blob/master/token_key.txt">consumer_key=
consumer_secret=
access_token_key=
access_token_secret=
</code></pre>

<p>mari kita test apakah kode yang kita buat bekerja.</p>

<pre><code class="sh Terminal">$ python countTweets.py -oauth token_key.txt [kata]
</code></pre>

<p>Berikut video yang sudah dipercepat, soalnya kemaren butuh 2jam.</p>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/5ZYtQOPkfqs" allowfullscreen></iframe></div></p>

<p>Semua source code saya upload ke account github saya <a href="https://github.com/sofianhw/flagpole">sofianhw/flagpole</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Tentang Internet of Things via Email]]></title>
    <link href="http://www.sofianhw.com/blog/2015/07/05/interview-tentang-internet-of-things-via-email/"/>
    <updated>2015-07-05T01:48:40+07:00</updated>
    <id>http://www.sofianhw.com/blog/2015/07/05/interview-tentang-internet-of-things-via-email</id>
    <content type="html"><![CDATA[<h2>1. Apa sih yang dimaksud dengan Internet of Things?</h2>

<p>Sebuah konsep dimana benda/objek dengan bantuan perangkat elektronik, perngkat lunak, sensor, dan konektivitas/internet yang membuat benda tersebut dapat bertukaran data / informasi, yang menyebabkan benda tersebut bisa saling berinteraksi dan lebih pintar.</p>

<!--more-->


<h2>2. Apa saja yang termasuk dalam Internet of Things?</h2>

<p>Benda apa saja yang memiliki kemampuan berinteraksi via internet. Contoh yang sudah lama ada ditengah kita yaitu mesin ATM. Mesin ATM bisa berinteraksi dengan mesin server melalui internet, dan untuk menarik uang / menabung uang terdapat sensor yang bisa membedakan besaran uang tersebut.</p>

<h2>3. Apa saja manfaat yang bisa kita dapatkan dengan Internet of Things?</h2>

<p>Sisi baiknya adalah kita semakin dimanja dengan teknologi ini, dimana kita bisa berinteraksi dengan benda-benda milik kita dimanapun kita berada kita bisa mengkontrol benda tersebut. Contohnya sekarang banyak yang mengembangkan <em>smartcity</em>, kebayangkan ketika kota yang kita tinggali bisa berinteraksi dengan kita dimanapun kita berada. kita bisa tau jalan yang macet, efisiensi penggunakan energi lampu jalan. serta kita bisa mendapakan prediksi cuaca dan prediksi perjalan kita.
Salah satu teman saya mengembangkan teknologi <strong>IoT</strong> untuk membantu pembudidaya ikan. mereka membuat sebuah startup bernama <a href="http://www.efishery.com">efishery</a>. dimana mereka membuat sebuah tempat pakan ikan yang smart. dengan bantuan alat ini para petani budidaya ikan bisa menghemat pemberian pakan  kepada ikan. karena dengan sensor yang ada pada alat ini, memungkinkan untuk mengetahui apakah semua ikan sudah mendapatkan makanan. ketika semuanya efisien akan berakibat pada kondisi kolam yang lebih sehat, karena tidak ada pakan yang terbuang. Bahkan ketika pakan habis pun, alat tersebut bisa berinteraksi dengan mengirimkan notifikasi pada pemilik kolam.</p>

<h2>4. Di Indonesia sendiri, siapa yang mempopulerkan Internet of Things?</h2>

<p>Di Indonesia sendiri kita mempunya beberapa startup yang fokus dibidang <strong>IoT</strong>, kebetulan perusahaan saya <a href="http://crazyhackerz.com">Crazyhackerz</a> juga sedang mengembangkan beberapa perangkat berbasiskan <strong>IoT</strong>. Kita membidik sektor hiburan. Diantaranya kita mempunyai <a href="http://crazyhackerz.com/instaprint_by_crackerz">Instaprint</a> dan <a href="http://crazyhackerz.com/instabelly">Instabelly</a>, dimana kedua alat ini memanfaatkan API <a href="https://instagram.com">Instagram</a> untuk berinteraksi.
Startup lainnya seperti yang sudah saya sebutkan sebelumnya yaitu <a href="http://www.efishery.com">efishery</a>. Selain pada solusi ada juga startup yang menyediakan layanan <em>platform</em> <strong>IoT</strong> seperti <a href="http://www.geeknesia.com">Geeknesia</a>. Dengan adanya <em>platform</em> dari <a href="http://www.geeknesia.com">Geeknesia</a> ini akan mempermudah para pengembang <strong>IoT</strong> untuk fokus pada aplikasi/device mereka, tidak perlu pusing dengan complexnya membangun server sebagai tempat pertukaran data untuk para perangkat <strong>IoT</strong>.</p>

<h2>5. Anda  memanfaatkan Internet of Things untuk apa saja, menggunakan perangkat/ gadget apa, dan sudah berapa lama menggunakannya?</h2>

<p>Karena saya orangnya agak males, saya mencoba membuat kamar saya lebih <em>smart</em>. Dimana saya bisa mengkontrol lampu dan AC dari internet. jadi ketika saya pulang saya ingin kamar sudah nyala dan dalam keadaan dingin. dan ketika ingin tidur saya bisa mematikan lampu tanpa harus beranjak dari tempat tidur.</p>

<h2>6. Saat ini sudah beberapa kali acara meeting Komunitas <strong>IoT</strong> diadakan. Siapa yang mencetuskan acara ini, tujuannya untuk apa, dan siapa saja yang ikut serta?</h2>

<p>Komunitas <strong>IoT</strong> yang sangat konsisten berada di Bandung. kebetulan jum'at ini sudah memasuki pertemuan yang ke 13.
<a href="http://meetup.com/Bandung-Internet-of-Things-Meetup/">Bandung <strong>IoT</strong> Meetup</a>.
yang mengkoordinasi meetup ini Martin Kurniadi founder dari <a href="http://www.geeknesia.com">Geeknesia</a>. Meetup ini dia bentuk setelah mengikuti hackathon <strong>IoT</strong> yang kita adakan maret lalu, yang ikut acaranya ini <em>hobbyist</em>( komunitas arduino, raspberry pi) dan mahasiswa serta para pengembang bisnis yang terkait ( developer bangunan, telco, intel, ibm, dll ).</p>

<h2>7. Bisa dijelaskan sedikit mengenai Komunitas <strong>IoT</strong>? (Berdiri sejak kapan, kegiatan apa saja yang biasa diadakan, topik apa saja yang dibahas anggotanya sudah berapa banyak, dan berasal dari kalangan mana saja)</h2>

<p>Berdiri sejak Maret 2015, kegiatan kita biasa sharing teknologi baru, dan kita juga mengadakan workshop. jumlah peserta yang biasa hadir berkisar 50-60 orang.</p>

<h2>8. Kegiatan terakhir Komunitas <strong>IoT</strong> menyorot topik apa? Kapan kegiatan selanjutnya akan diadakan, dan topik apa yang akan dibahas?</h2>

<p>terakhir kita mengenalkan teknologi dari Intel, mereka punya beberapa board yang berhubungan dengan <strong>IoT</strong> ( intel galileo / intel edison ). dan juga kita mengundang beberapa startup <strong>IoT</strong> yang sudah me launching produk mereka ( efishery dan cubeacon ). next event tanggal 3 juli 2015. Akan membahas tentang <em>hype cycle</em> <strong>IoT</strong> dan raspberry pi.</p>

<h2>9. Bagaimana caranya jika ada yang ingin bergabung dengan Komunitas <strong>IoT</strong>. Apakah ada syarat tertentu? Seperti apa sistem keanggotaannya? Apakah ada kontak yang boleh dipublikasikan (misalnya email) bagi mereka yang ingin bergabung?</h2>

<p>Komunitasnya bersifat terbuka, siapa saja bisa bergabung kita, dapat mengunjungi sitenya <a href="http://meetup.com/Bandung-Internet-of-Things-Meetup/">Bandung <strong>IoT</strong> Meetup</a>.</p>

<h2>10. Terakhir, apa prediksi atau pandangan Anda terhadap <strong>IoT</strong> di Indonesia dalam beberapa tahun ke depan?</h2>

<p>Pangsa pasar untuk <strong>IoT</strong> masih sangat luas di indonesia. Dan atusias para pengembang juga sangat bagus. Kemungkinan demam startup di software / aplikasi juga akan terjadi di <strong>IoT</strong>. Seperti kita liat di crowdfunding <em>platform</em> banyak sekali benda-benda pintar yang sudah sukses disana. di indonesia pun kita punya beberapa crowdfunding yang akan mendukung para pengembang <strong>IoT</strong> ( <a href="https://kitabisa.com">Kitabisa</a>, <a href="http://wujudkan.com">wujudkan</a>, <a href="http://idesabi.com">idesabi</a>). Di dukung pula dengan maker movement di indonesia yang sangat bagus perkembangannya. Dan <a href="http://www.ge.com/id/">GE ( <em>General Electric</em> )</a> agustus nanti akan membuka GE Garage, dimana akan tersedia tools lengkap untuk para maker. Selain itu juga sudah banyak <strong>IoT</strong> hackathon yang mulai diadakan oleh beberapa organiasi di Indonesia, <a href="http://compfest.web.id/competition/internet-of-things-competition">Comfest UI</a> juga tahun ini memasukan <strong>IoT</strong> sebagai salah satu kompetisi mereka.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Menghubungkan Intel Edison Ke Geeknesia via MQTT Python-Paho]]></title>
    <link href="http://www.sofianhw.com/blog/2015/07/03/menghubungkan-intel-edison-ke-geeknesia-via-mqtt-python-paho/"/>
    <updated>2015-07-03T16:58:55+07:00</updated>
    <id>http://www.sofianhw.com/blog/2015/07/03/menghubungkan-intel-edison-ke-geeknesia-via-mqtt-python-paho</id>
    <content type="html"><![CDATA[<p>Hello Good People,</p>

<p>Pada postingan sebelumnya kita sudah membahas cara menghubungkan <a href="http://blog.sofianhw.com/blog/2015/06/13/iot-pada-intel-galileo-menggunakan-platform-dari-geeknesia-dot-com/">Intel Galileo ke Geeknesia dengan menggunakan nodejs</a>. Kemudian minggu lalu saya juga menulis tentang <a href="http://blog.sofianhw.com/blog/2015/06/29/pengenalan-bahasa-pemrogramman-python/">dasar-dasar Python</a>. Nah gimana menurut kalian bahasa Python sendiri?.</p>

<!-- more -->


<p>Sekarang kita akan mempelajari bagaimana menghubungkan Intel Edison <em>board</em> penerus dari Intel Galileo, bentuknya lebih kecil dan sudah dilengkapi dengan wifi dan bluetooth.</p>

<p>Sebelum kita menghubungkan Intel Edison ke geeknesia, kita akan mempelajari terlebih dahulu bagaimana cara mengkontrol GPIO dari Arduino <em>breakout</em> yang dibuat khusus untuk Intel Edison. Untuk mengkontrol GPIO pada Intel <em>Board</em> telah tersedia <em>module opensource</em> yaitu <a href="https://pypi.python.org/pypi/Wiring-x86/1.0.0">Wiring-x86</a>.</p>

<pre><code class="sh Terminal">$ pip install wiring-x86
</code></pre>

<p>Mari kita tes untuk membuat blinky LED.</p>

<pre><code class="Python blink.py"># Import the time module enable sleeps between turning the led on and off.
import time

# Import the GPIOEdison class from the wiringx86 module.
# In case you want to use a different board, simply the import right class
# below. The API is unified for all supported boards.
from wiringx86 import GPIOEdison as GPIO

# Create a new instance of the GPIOEdison class.
# Setting debug=True gives information about the interaction with sysfs.
gpio = GPIO(debug=False)
pin = 7
state = gpio.HIGH

# Set pin 7 to be used as an output GPIO pin.
print 'Setting up pin %d' % pin
gpio.pinMode(pin, gpio.OUTPUT)


print 'Blinking pin %d now...' % pin
try:
    while(True):
        # Write a state to the pin. ON or OFF.
        gpio.digitalWrite(pin, state)

        # Toggle the state.
        state = gpio.LOW if state == gpio.HIGH else gpio.HIGH

        # Sleep for a while.
        time.sleep(0.5)

# When you get tired of seeing the led blinking kill the loop with Ctrl-C.
except KeyboardInterrupt:
    # Leave the led turned off.
    print '\nCleaning up...'
    gpio.digitalWrite(pin, gpio.LOW)

    # Do a general cleanup. Calling this function is not mandatory.
    gpio.cleanup()
</code></pre>

<p>simpan dengan nama file blink.py , mari kita execute filenya.</p>

<pre><code class="sh Terminal">$ python blink.py
</code></pre>

<p><video width='320' height='640' preload='metadata' controls poster='/images/blinking-led-edison.jpg'><source src='/images/blinking-led-edison.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'></video></p>

<p>Hore!!! LED-nya kedap-kedip.</p>

<p>Setelah kita bisa mengkontrol GPIO dari Intel Edison sekarang saatnya kita menginstall <em>package</em> untuk MQTT Client. Salah satu <em>module</em> yang hits sekarang yaitu <a href="https://pypi.python.org/pypi/paho-mqtt">Paho-MQTT</a>.</p>

<pre><code class="sh Terminal">$ pip install paho-mqtt
</code></pre>

<p>Selanjutnya, berikut kode dasar menggunakan paho-mqtt untuk berkomunikasi dengan <a href="http://geeknesia.com">Geeknesia</a> :
<figure class='code'><figcaption><span>mqttClient.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='Python'><span class='line'><span class="kn">from</span> <span class="nn">wiringx86</span> <span class="kn">import</span> <span class="n">GPIOEdison</span> <span class="k">as</span> <span class="n">GPIO</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">paho.mqtt.client</span> <span class="kn">as</span> <span class="nn">paho</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">urlparse</span><span class="o">,</span> <span class="nn">time</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">gpio</span> <span class="o">=</span> <span class="n">GPIO</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="n">analogpin</span> <span class="o">=</span> <span class="mi">17</span>
</span><span class='line'><span class="n">gpio</span><span class="o">.</span><span class="n">pinMode</span><span class="p">(</span><span class="n">analogpin</span><span class="p">,</span> <span class="n">gpio</span><span class="o">.</span><span class="n">ANALOG_INPUT</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Define</span> <span class="n">event</span> <span class="n">callbacks</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">on_connect</span><span class="p">(</span><span class="n">mosq</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">rc</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">rc</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">rc</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">mosq</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">topic</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">qos</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">payload</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">on_publish</span><span class="p">(</span><span class="n">mosq</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">mid</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">mid</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">mid</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">on_subscribe</span><span class="p">(</span><span class="n">mosq</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">mid</span><span class="p">,</span> <span class="n">granted_qos</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Subscribed</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">granted_qos</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">on_log</span><span class="p">(</span><span class="n">mosq</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">string</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="n">string</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mqttc</span> <span class="o">=</span> <span class="n">paho</span><span class="o">.</span><span class="n">Client</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Assign</span> <span class="n">event</span> <span class="n">callbacks</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mqttc</span><span class="o">.</span><span class="n">on_message</span> <span class="o">=</span> <span class="n">on_message</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">on_connect</span> <span class="o">=</span> <span class="n">on_connect</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">on_publish</span> <span class="o">=</span> <span class="n">on_publish</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">on_subscribe</span> <span class="o">=</span> <span class="n">on_subscribe</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Uncomment</span> <span class="n">to</span> <span class="n">enable</span> <span class="n">debug</span> <span class="n">messages</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">mqttc</span><span class="o">.</span><span class="n">on_log</span> <span class="o">=</span> <span class="n">on_log</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Parse</span> <span class="n">CLOUDMQTT_URL</span> <span class="p">(</span><span class="ow">or</span> <span class="n">fallback</span> <span class="n">to</span> <span class="n">localhost</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">url_str</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">environ</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">CLOUDMQTT_URL</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">mqtt</span><span class="p">:</span><span class="o">//</span><span class="n">USERNAME</span><span class="p">:</span><span class="n">PASSWORD</span><span class="nd">@geeknesia.com</span><span class="p">:</span><span class="mi">1883</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'><span class="n">url</span> <span class="o">=</span> <span class="n">urlparse</span><span class="o">.</span><span class="n">urlparse</span><span class="p">(</span><span class="n">url_str</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Connect</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mqttc</span><span class="o">.</span><span class="n">username_pw_set</span><span class="p">(</span><span class="n">url</span><span class="o">.</span><span class="n">username</span><span class="p">,</span> <span class="n">url</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'><span class="n">mqttc</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">url</span><span class="o">.</span><span class="n">hostname</span><span class="p">,</span> <span class="n">url</span><span class="o">.</span><span class="n">port</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Start</span> <span class="n">subscribe</span><span class="p">,</span> <span class="k">with</span> <span class="n">QoS</span> <span class="n">level</span> <span class="mi">0</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mqttc</span><span class="o">.</span><span class="n">subscribe</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">hello</span><span class="o">/</span><span class="n">world</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">0</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Publish</span> <span class="n">a</span> <span class="n">message</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mqttc</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">iot</span><span class="o">/</span><span class="n">live</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">DEVICE_ID</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">Continue</span> <span class="n">the</span> <span class="n">network</span> <span class="n">loop</span><span class="p">,</span> <span class="nb">exit</span> <span class="n">when</span> <span class="n">an</span> <span class="n">error</span> <span class="n">occurs</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">rc</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">while</span> <span class="n">rc</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="n">rc</span> <span class="o">=</span> <span class="n">mqttc</span><span class="o">.</span><span class="n">loop</span><span class="p">()</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="n">gpio</span><span class="o">.</span><span class="n">analogRead</span><span class="p">(</span><span class="n">analogpin</span><span class="p">)</span>
</span><span class='line'>    <span class="n">mqttc</span><span class="o">.</span><span class="n">publish</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">iot</span><span class="o">/</span><span class="n">data</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">code</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">USERNAME</span><span class="p">:</span><span class="n">PASSWORD</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">attributes</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">LDR</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">+</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">value</span><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;</span> <span class="o">+&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;}}</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">60</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">rc</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">rc</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Analog Input pada <em>module</em> Wiring-x86 mulai dari pin 17-19. Jadi A0 = 17 , dan seterusnya. Untuk saat ini saya menggunakan A03 sebagai Analog Input. Dengan demikian saya menggunakan pin 17.</p>

<p>Jangan lupa ganti DEVICE_ID, USERNAME, dan PASSWORD , sesuai dengan informasi detail dari device yang Anda daftarkan pada <a href="http://geeknesia.com">Geeknesia</a>.
Mari kita execute script Python kita
<code>sh Terminal
$ python mqttClient.py
</code></p>

<p><img class="center" src="/images/blinking-led-edison.jpg" width="320" height="320" title="&lsquo;blinking led edison&rsquo;" >
<img class="center" src="/images/data-device.jpg" title="&lsquo;data-device&rsquo;" ></p>

<p>Intel Edison akan selalu mengirimkan data dari sensor LDR ke <a href="http://geeknesia.com">Geeknesia</a> dengan interval 60 detik.
Semua source saya upload ke Github dengan nama repo <a href="https://github.com/sofianhw/python-mqtt-geeknesia">python-mqtt-geeknesia</a>.</p>

<p>Silakan berkreasi dengan dasar yang sudah ada.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IoT Pada Intel Galileo Menggunakan Platform Dari Geeknesia.com]]></title>
    <link href="http://www.sofianhw.com/blog/2015/06/13/iot-pada-intel-galileo-menggunakan-platform-dari-geeknesia-dot-com/"/>
    <updated>2015-06-13T21:48:40+07:00</updated>
    <id>http://www.sofianhw.com/blog/2015/06/13/iot-pada-intel-galileo-menggunakan-platform-dari-geeknesia-dot-com</id>
    <content type="html"><![CDATA[<p>Hari ini sangat luar biasa, karena saya dapat berbagi ilmu pengetahuan tentang &ldquo;Internet of Things&rdquo; dengan menggunakan <em>board</em> dari <a href="http://www.intel.com">intel</a> berupa <em>Intel Galileo</em> dan <em>Intel Edison</em> pada acara <a href="http://www.meetup.com/Bandung-Internet-of-Things-Meetup/events/223152407">Bandung Internet of Things Meetup yang ke 12</a>
Persentasi saya dimulai dari menceritakan apa itu <em>Intel Galileo</em> dan <em>Intel Edison</em>. Pada tulisan saat ini saya tidak akan banyak menulis tentang <em>board</em> tersebut, saya akan bercerita pengalaman sayang menggunakan <em>platform IoT</em> asli <em>made in</em> Bandung yaitu <a href="http://www.geeknesia.com">Geeknesia</a>.</p>

<!-- more -->


<h4>1. Registrasi</h4>

<p>Pertama kita harus registrasi dulu pada websitenya <a href="http://www.geeknesia.com">Geeknesia</a>, Tunggu beberapa saat nanti Anda akan mendapatkan email dari <a href="http://www.geeknesia.com">Geeknesia</a> berupa username dan password untuk masuk ke <em>platform IoT</em> tersebut.</p>

<h4>2. Add New Device</h4>

<p>Setelah mendapatkan akses, kita bisa menambahkan device yang kita punya dengan cara, mengklik button pada pojok kanan atas &ldquo;Add New Device&rdquo;, disini kita akan diminta untuk memberikan informasi <em>device</em> kita.</p>

<p><img class="center" src="/images/add-new-device.jpg" title="&lsquo;add new device&rsquo;" ></p>

<p>jika semua data sudah diisi dengan benar, kita tekan tombol <em>create</em>. Setelah itu kita akan dibawa ke halaman yang memberikan informasi detail tentang device kita dan beberapa contoh API dari <a href="http://www.geeknesia.com">Geeknesia</a> yang dapat kita gunakan nantinya.</p>

<p><img class="center" src="/images/detail-device.jpg" title="&lsquo;detail device&rsquo;" ></p>

<h4>3. Menghubungkan Intel Galileo ke Geeknesia</h4>

<p>Ada beberapa cara untuk menghubungkan Intel Galileo dan <a href="http://www.geeknesia.com">Geeknesia</a>. Namun pada artikel ini saya hanya akan membahas dengan menggunakan bahasa pemrogramman <em><a href="https://nodejs.org">nodejs</a></em> dan <em>protocol <a href="http://mqtt.org">mqtt</a></em>.
Saya menggunakan Grove Starter Kit, untuk memudahkan dalam menggunakan LED dan sensor LDR.</p>

<p><img class="center" src="/images/intel-galileo-geeknesia.jpg" title="&lsquo;intel galileo geeknesia&rsquo;" ></p>

<p>Persiapkan Intel Galileo kalian, pertama-tama remote login Intel Galileo, bisa melalui ssh ataupun telnet ataupun screen. Untuk saat ini saya menggunakan ssh.
Kemudian tulis kode berikut dan simpan
<code>JavaScript package.json
{
  "name": "galileo-geeknesia",
  "version": "1.0.0",
  "description": "menghubungkan galileo ke geeknesia",
  "main": "galileo-geeknesia.js",
  "dependencies": {
    "galileo-io": "^0.8.14",
    "mqtt": "^1.1.4"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"
  },
  "author": "sofian hadiwijaya",
  "license": "ISC"
}
</code></p>

<pre><code class="JavaScript galileo-geeknesia.js">var mqtt = require('mqtt'), url = require('url'), Galileo = require("galileo-io");
var mqtt_url = url.parse('mqtt://USERNAME:PASSWORD@geeknesia.com:1883');
var auth = (mqtt_url.auth || ':').split(':');
var board = new Galileo();
var LDR = 0;

var client = mqtt.createClient(mqtt_url.port, mqtt_url.hostname, {
  username: auth[0],
  password: auth[1] 
});

client.on('connect', function() { // When connected
  client.publish('iot/live', 'DEVICE_ID', function() {
    console.log("Menghubungkan ke Geeknesia");
  });
  board.pinMode(8,board.MODES.OUTPUT)
  board.analogRead("A3",function(data){
    LDR = data;
  });
  setInterval(function(){
    if(LDR &gt;=300)
      board.digitalWrite(8,1);
    else
      board.digitalWrite(8,0);
    client.publish('iot/data', '{"code":"USERNAME:PASSWORD","attributes":{"LDR":"'+LDR+'"}}', function() {
      console.log("Send data LDR = "+LDR);
    });
  }, 1000);
});
</code></pre>

<p>Ganti USERNAME, PASSWORD, dan DEVICE_ID sesuai dengan informasi detail dari device kalian. Source codenya saya upload ke <a href="http://www.github.com">github</a>, yang mau <em>clone</em> ataupun <em>fork</em> bisa ke link <a href="https://github.com/sofianhw/intel-galileo-geeknesia">intel-galileo-geeknesia</a>.
Untuk menjalan kode tersebut sebelumnya kita ketik perintah
<code>Bash
$ npm install
</code>
perintah tersebut akan menginstal <em>dependencies</em> dari kode kita. Setelah itu untuk menjalankan <em>script</em> tersebut kita ketik perintah
<code>Bash
$ node galileo-geeknesia.js
</code>
untuk melihat apakah kode tersebut berjalan dengan sempurna, kita kembali ke <em>dashboard</em> <a href="http://www.geeknesia.com">Geeknesia</a>. Kita pastikan device kita terhubung dan mengirimkan data, bisa dilihat pada gambar berikut</p>

<p><img class="center" src="/images/data-device.jpg" title="&lsquo;data device&rsquo;" ></p>

<p>Pengembangan selanjut, kita bisa bikin dashboard yang mendapatkan data dari API <a href="http://www.geeknesia.com">Geeknesia</a>.</p>
]]></content>
  </entry>
  
</feed>
